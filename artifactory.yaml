kind: Template
apiVersion: v1
labels:
  version: 6.5.2-1
  group: infrastructure
metadata:
  annotations:
    description: Creates the infrastructure for the end-to-end content and security management story.
    tags: instant-app,artifactory
    version: 6.5.2-1
  name: artifactory
objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: artifactory
  spec:
    tags:
      - name: "${ARTIFACTORY_VERSION}"
        from:
          kind: DockerImage
          name: "${ARTIFACTORY_IMAGE_REPOSITORY}:${ARTIFACTORY_VERSION}"
        importPolicy: {}
      - name: latest
        from:
          kind: ImageStreamTag
          name: "${ARTIFACTORY_VERSION}"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: artifactory-postgresql
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: '${POSTGRESQL_VOLUME_CAPACITY}'
    storageClassName: ${STORAGE_CLASS_NAME}
- kind: Route
  apiVersion: v1
  metadata:
    name: artifactory
  spec:
    to:
      kind: Service
      name: artifactory
    host: ${ROUTE_DOMAIN}
- kind: Service
  apiVersion: v1
  metadata:
    name: artifactory
    annotations:
      app: artifactory
      service.openshift.io/infrastructure: 'true'
      service.alpha.openshift.io/dependencies: '[{"name":"${DATABASE_SERVICE_NAME}","namespace":"","kind":"Service"}]'
      service.alpha.openshift.io/serving-cert-secret-name: artifactory
  spec:
    ports:
    - name: artifactory
      port: 8081
      protocol: TCP
      targetPort: 8081
    selector:
      app: artifactory
    sessionAffinity: None
    type: ClusterIP
- kind: Service
  apiVersion: v1
  metadata:
    name: artifactory-postgresql
    annotations:
      description: Exposes the database server
  spec:
    ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
    selector:
      name: artifactory-postgresql
- kind: StatefulSet
  apiVersion: apps/v1
  metadata:
    name: artifactory
    labels:
      app: artifactory
  spec:
    serviceName: artifactory
    replicas: 1
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - artifactory
          from:
            kind: ImageStreamTag
            name: "artifactory:${ARTIFACTORY_VERSION}"
          lastTriggeredImage: ''
    test: false
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate

    selector:
      matchLabels:
        app: artifactory
    template:
      metadata:
        labels:
          deploymentconfig: artifactory
          app: artifactory
      spec:
        serviceAccountName: artifactory
        serviceAccount: artifactory
        containers:
        - name: artifactory
          image: "${ARTIFACTORY_IMAGE_REPOSITORY}:${ARTIFACTORY_VERSION}"
          imagePullPolicy: Always
          env:
          - name: DB_USER
            value: '${DATABASE_USER}'
          - name: DB_PASSWORD
            value: '${DATABASE_PASSWORD}'
          - name: DB_HOST
            value: '${DATABASE_SERVICE_NAME}'
          - name: DB_TYPE
            value: postgresql
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 130
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: 8081
          ports:
          - containerPort: 8081
            protocol: TCP
          resources:
            limits:
              cpu: '2'
              memory: 8192Mi
            requests:
              cpu: '1'
              memory: 4096Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/opt/jfrog/artifactory
            name: artifactory-data
          - name: generated-certificate-volume
            mountPath: /etc/opt/jfrog/certs/
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: artifactory-etc
          configMap:
            name: artifactory-default-config
            items:
              - key: default
                path: default
              - key: artifactory.system.properties
                path: artifactory.system.properties
              - key: artifactory.config.xml
                path: artifactory.config.xml
              - key: artifactory.lic
                path: artifactory.lic
        - name: artifactory-data
          persistentVolumeClaim:
            claimName: artifactory-data
        - name: artifactory-logs
          persistentVolumeClaim:
            claimName: artifactory-logs
        - name: artifactory-backup
          persistentVolumeClaim:
            claimName: artifactory-backup
        - name: artifactory-var
          persistentVolumeClaim:
            claimName: artifactory-var
        - name: generated-certificate-volume
          secret:
            secretName: artifactory
    volumeClaimTemplates:
      - metadata:
          name: artifactory-data
          annotations:
            app: artifactory
        spec:
          accessModes:
            - "ReadWriteOnce"
          resources:
            requests:
              storage: ${ARTIFACTORY_DATA_VOLUME_CAPACITY}
          storageClassName: ${STORAGE_CLASS_NAME}
      - metadata:
          name: artifactory-logs
          annotations:
            app: artifactory
        spec:
          accessModes:
            - "ReadWriteOnce"
          resources:
            requests:
              storage: 1Gi
          storageClassName: ${STORAGE_CLASS_NAME}
      - metadata:
          name: artifactory-backup
          annotations:
            app: artifactory
        spec:
          accessModes:
            - "ReadWriteOnce"
          resources:
            requests:
              storage: 1Gi
          storageClassName: ${STORAGE_CLASS_NAME}
      - metadata:
          name: artifactory-var
          annotations:
            app: artifactory
        spec:
          accessModes:
            - "ReadWriteOnce"
          resources:
            requests:
              storage: 1Gi
          storageClassName: ${STORAGE_CLASS_NAME}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: '${DATABASE_SERVICE_NAME}'
    annotations:
      description: Defines how to deploy the database
  spec:
    strategy:
      type: Recreate
    triggers:
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - artifactory-postgresql
          from:
            kind: ImageStreamTag
            namespace: openshift
            name: 'postgresql:9.5'
      - type: ConfigChange
    replicas: 1
    selector:
      name: '${DATABASE_SERVICE_NAME}'
    template:
      metadata:
        name: '${DATABASE_SERVICE_NAME}'
        labels:
          name: '${DATABASE_SERVICE_NAME}'
      spec:
        volumes:
          - name: data
            emptyDir: {}
        containers:
          - name: '${DATABASE_SERVICE_NAME}'
            image: ' '
            ports:
              - containerPort: 5432
            restartPolicy: Always
            dnsPolicy: ClusterFirst
            imagePullPolicy: IfNotPresent
            capabilities: {}
            securityContext:
              capabilities: {}
              privileged: false
            readinessProbe:
              timeoutSeconds: 1
              initialDelaySeconds: 5
              exec:
                command:
                  - '/bin/sh'
                  - '-i'
                  - '-c'
                  - 'psql -h 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE} -c "SELECT 1"'
            livenessProbe:
              timeoutSeconds: 1
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
            volumeMounts:
              - name: artifactory-postgresql-data
                mountPath: /var/lib/pgsql/data
            terminationMessagePath: /dev/termination-log
            env:
              - name: POSTGRESQL_USER
                value: '${DATABASE_USER}'
              - name: POSTGRESQL_PASSWORD
                value: '${DATABASE_PASSWORD}'
              - name: POSTGRESQL_DATABASE
                value: '${DATABASE_NAME}'
              - name: POSTGRESQL_MAX_CONNECTIONS
                value: '${POSTGRESQL_MAX_CONNECTIONS}'
              - name: POSTGRESQL_SHARED_BUFFERS
                value: '${POSTGRESQL_SHARED_BUFFERS}'
            resources:
              limits:
                memory: '${MEMORY_POSTGRESQL_LIMIT}'
        volumes:
          - name: artifactory-postgresql-data
            persistentVolumeClaim:
              claimName: artifactory-postgresql
parameters:
  - name: MEMORY_POSTGRESQL_LIMIT
    displayName: Memory Limit (PostgreSQL)
    required: true
    description: Maximum amount of memory the PostgreSQL container can use.
    value: 512Mi
  - name: DATABASE_SERVICE_NAME
    displayName: Database Service Name
    value: artifactory-postgresql
  - name: DATABASE_USER
    displayName: Database Username
    generate: expression
    from: 'user[A-Z0-9]{3}'
    value: artifactory
  - name: DATABASE_PASSWORD
    displayName: Database Password
    generate: expression
    from: '[a-zA-Z0-9]{8}'
    value: artifactory
  - name: DATABASE_NAME
    required: true
    displayName: Database Name
    value: artifactory
  - name: POSTGRESQL_MAX_CONNECTIONS
    displayName: Maximum Database Connections
    value: '100'
  - name: POSTGRESQL_SHARED_BUFFERS
    displayName: Shared Buffer Amount
    value: 12MB
  - name: POSTGRESQL_VOLUME_CAPACITY
    displayName: Volume Capacity
    description: 'Volume space available for data, e.g. 512Mi, 2Gi.'
    value: 4Gi
    required: true
  - name: ARTIFACTORY_DATA_VOLUME_CAPACITY
    displayName: Artifactory Data Volume Capacity
    description: 'Volume space available for data, e.g. 512Mi, 2Gi.'
    value: 300Gi
    required: true
  - name: ARTIFACTORY_VERSION
    displayName: Artifactory Version
    description: 'Version of the Artifactory container image to be used'
    value: "6.8.2"
    required: true
  - name: ARTIFACTORY_IMAGE_REPOSITORY
    displayName: Artifactory Image Repository
    description: 'Artifactory container image repository to be used'
    value: "registry.mgt.devsecops.gov:5000/jfrog/artifactory-pro"
    required: true
  - description: The storageClassName to use when creating PersistentVolumeClaims
    displayName: Storage Class Name
    name: STORAGE_CLASS_NAME
    value: glusterfs-storage
  - description: The domain name to use when creating the route (users will browse to this to access artifactory)
    displayName: Storage Class Name
    name: ROUTE_DOMAIN
    value: artifactory.apps.mgt.devsecops.gov

